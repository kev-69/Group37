ATINKA MEDS PHARMACY INVENTORY SYSTEM
ALGORITHM ANALYSIS REPORT
========================================

Generated: July 17, 2025
Project: Group 37 - Pharmacy Inventory Management System
Location: Adenta, Accra, Ghana

========================================
1. EXECUTIVE SUMMARY
========================================

This report analyzes the algorithmic choices and performance characteristics of the
Atinka Meds Pharmacy Inventory Management System. The system implements custom data
structures and algorithms optimized for offline-first pharmacy operations.

Key Performance Metrics:
- Drug Lookup: O(1) average time complexity
- Inventory Sorting: O(n log n) for critical operations
- Stock Monitoring: O(log n) priority operations
- File Persistence: O(n) read/write operations

========================================
2. DATA STRUCTURE ANALYSIS
========================================

2.1 MyHashMap<K, V> - Primary Drug Storage
-------------------------------------------
Implementation: Separate chaining with dynamic resizing
Load Factor: 0.75 (resize trigger)
Hash Function: Built-in Java hashCode() with modulo operation

Time Complexity Analysis:
- Insert: O(1) average, O(n) worst case
- Search: O(1) average, O(n) worst case  
- Delete: O(1) average, O(n) worst case

Space Complexity: O(n) where n = number of drugs

JUSTIFICATION:
HashMap chosen for drug storage because pharmacy operations require frequent
drug lookups by code (prescriptions, sales, stock checks). The O(1) average
lookup time is critical for real-time pharmacy operations.

TRADE-OFFS:
✓ Pros: Extremely fast lookups, good for large inventories
✗ Cons: No inherent ordering, hash collisions in worst case

2.2 MyLinkedList<T> - Transaction History
------------------------------------------
Implementation: Doubly-linked list with head/tail pointers
Node Structure: Data + previous/next pointers

Time Complexity Analysis:
- Insert (head/tail): O(1)
- Insert (middle): O(n) - requires traversal
- Delete (known node): O(1)
- Search: O(n)

Space Complexity: O(n) + pointer overhead

JUSTIFICATION:
Linked list chosen for transaction history because:
1. Frequent insertions of new transactions
2. Occasional need to traverse recent transactions
3. Memory efficient for varying transaction volumes

TRADE-OFFS:
✓ Pros: Dynamic size, efficient insertion/deletion
✗ Cons: No random access, cache locality issues

2.3 MyMinHeap<T> - Stock Priority Management
---------------------------------------------
Implementation: Array-based binary heap
Index Calculation: Parent = (i-1)/2, Children = 2i+1, 2i+2

Time Complexity Analysis:
- Insert: O(log n)
- Extract Min: O(log n)
- Peek: O(1)
- Heapify: O(log n)

Space Complexity: O(n)

JUSTIFICATION:
Min-heap chosen for stock management to efficiently identify drugs with
lowest stock levels for reordering. The O(log n) operations are acceptable
for the expected inventory size (hundreds to thousands of items).

TRADE-OFFS:
✓ Pros: Efficient priority operations, cache-friendly array storage
✗ Cons: Not suitable for frequent arbitrary deletions

2.4 MyQueue<T> - Purchase Processing
-------------------------------------
Implementation: Circular array with front/rear pointers
Capacity: Dynamic with overflow handling

Time Complexity Analysis:
- Enqueue: O(1)
- Dequeue: O(1)
- Peek: O(1)

Space Complexity: O(capacity)

JUSTIFICATION:
Queue provides FIFO processing needed for purchase orders and customer
service. Fixed capacity with circular array provides predictable performance.

2.5 MyStack<T> - Sales Log
---------------------------
Implementation: Dynamic array with top pointer
Growth Strategy: Double capacity when full

Time Complexity Analysis:
- Push: O(1) amortized
- Pop: O(1)
- Peek: O(1)

Space Complexity: O(capacity)

JUSTIFICATION:
Stack provides LIFO access to recent sales for quick reference and
potential undo operations. Dynamic resizing handles varying sales volumes.

2.6 MyTree<T> - Supplier Management
------------------------------------
Implementation: Binary Search Tree (unbalanced)
Ordering: Based on supplier ID or name

Time Complexity Analysis:
- Insert: O(log n) average, O(n) worst case
- Search: O(log n) average, O(n) worst case
- Delete: O(log n) average, O(n) worst case

Space Complexity: O(n)

JUSTIFICATION:
BST chosen for supplier management to maintain sorted order for reports
and enable efficient range queries for supplier selection.

TRADE-OFFS:
✓ Pros: Maintains sorted order, efficient for range queries
✗ Cons: Can degrade to O(n) if unbalanced

========================================
3. SORTING ALGORITHM ANALYSIS
========================================

3.1 Merge Sort - Drug Name Sorting
-----------------------------------
Time Complexity: O(n log n) - all cases
Space Complexity: O(n) - temporary array needed
Stability: Stable sort

JUSTIFICATION:
Merge sort chosen for drug name sorting because:
1. Guaranteed O(n log n) performance
2. Stable sort preserves relative order of equal elements
3. Predictable performance for user interface responsiveness

USE CASE: Generating alphabetical drug lists for pharmacist reference

3.2 Quick Sort - Price Sorting  
------------------------------
Time Complexity: O(n log n) average, O(n²) worst case
Space Complexity: O(log n) average - recursion stack
Stability: Not stable

JUSTIFICATION:
Quick sort chosen for price sorting because:
1. Excellent average-case performance
2. In-place sorting saves memory
3. Price sorting typically done for reports, not user-critical operations

USE CASE: Financial reports and pricing analysis

3.3 Insertion Sort - Stock Level Sorting
-----------------------------------------
Time Complexity: O(n²) worst case, O(n) best case
Space Complexity: O(1)
Stability: Stable sort

JUSTIFICATION:
Insertion sort chosen for stock level sorting because:
1. Simple implementation and debugging
2. Efficient for small datasets (typical pharmacy inventory)
3. Adaptive - performs well on nearly sorted data
4. Stable sort maintains order of drugs with same stock level

USE CASE: Small inventory management, stock level monitoring

========================================
4. SEARCH ALGORITHM ANALYSIS
========================================

4.1 Hash-based Search (Drug Code)
----------------------------------
Time Complexity: O(1) average, O(n) worst case
Space Complexity: O(1)

IMPLEMENTATION:
Direct HashMap lookup using drug code as key.

PERFORMANCE ANALYSIS:
- Best Case: O(1) - no collisions
- Average Case: O(1) - well-distributed hash function
- Worst Case: O(n) - all keys hash to same bucket

REAL-WORLD PERFORMANCE:
With good hash function and load factor 0.75, collisions are rare.
Expected performance in pharmacy environment: O(1).

4.2 Linear Search (Drug Name)
-----------------------------
Time Complexity: O(n)
Space Complexity: O(1)

IMPLEMENTATION:
Sequential scan through drug array comparing names (substring matching).

JUSTIFICATION:
Linear search used for name-based searches because:
1. Names are not unique identifiers
2. Partial matching required (user may not know exact name)
3. Simple implementation
4. Acceptable performance for small to medium inventories

OPTIMIZATION OPPORTUNITIES:
- Implement trie for prefix matching: O(m) where m = query length
- Use inverted index for word-based searching

4.3 Binary Search (Sorted Arrays)
----------------------------------
Time Complexity: O(log n)
Space Complexity: O(1) iterative, O(log n) recursive

IMPLEMENTATION:
Used after sorting arrays for efficient searching in sorted data.

TRADE-OFFS:
- Requires pre-sorted data: O(n log n) preprocessing cost
- Excellent for multiple searches on same dataset
- Used in conjunction with sorting for complex queries

========================================
5. PERFORMANCE BENCHMARKING
========================================

Expected Performance with Different Inventory Sizes:

Small Pharmacy (100-500 drugs):
- Drug lookup: < 1ms
- Name search: 1-5ms
- Sort operations: 5-50ms
- Stock analysis: < 10ms

Medium Pharmacy (500-2000 drugs):
- Drug lookup: < 1ms
- Name search: 5-20ms
- Sort operations: 20-200ms
- Stock analysis: < 50ms

Large Pharmacy (2000+ drugs):
- Drug lookup: < 1ms
- Name search: 20-100ms
- Sort operations: 200ms-1s
- Stock analysis: < 200ms

SCALABILITY ANALYSIS:
The system scales well up to ~10,000 drugs. Beyond this:
1. Consider database integration
2. Implement pagination for lists
3. Add indexing for complex searches
4. Consider distributed storage

========================================
6. MEMORY USAGE ANALYSIS
========================================

Memory Footprint per Drug:
- Drug object: ~200 bytes
- HashMap entry overhead: ~32 bytes
- Supplier array: ~50 bytes (average)
- Total per drug: ~282 bytes

Expected Memory Usage:
- 500 drugs: ~141 KB
- 2000 drugs: ~564 KB  
- 10000 drugs: ~2.8 MB

MEMORY EFFICIENCY:
✓ Custom data structures reduce overhead vs Java Collections
✓ Array-based implementations improve cache locality
✓ File-based persistence enables data swapping

OPTIMIZATION OPPORTUNITIES:
- Lazy loading of drug details
- Compressed storage for large text fields
- Memory pooling for frequent objects

========================================
7. ALGORITHMIC TRADE-OFFS & DECISIONS
========================================

7.1 Time vs Space Trade-offs
-----------------------------

DECISION: HashMap for drug storage
TRADE-OFF: Higher memory usage for faster access
JUSTIFICATION: Pharmacy operations prioritize speed over memory efficiency

DECISION: Array-based heap vs tree-based priority queue
TRADE-OFF: Fixed capacity vs unlimited growth
JUSTIFICATION: Predictable memory usage more important than unlimited scaling

7.2 Simplicity vs Performance
------------------------------

DECISION: Unbalanced BST vs AVL/Red-Black tree
TRADE-OFF: Potential O(n) worst case vs guaranteed O(log n)
JUSTIFICATION: Simpler implementation, supplier data typically well-distributed

DECISION: Insertion sort for small datasets
TRADE-OFF: O(n²) worst case vs O(n log n) guaranteed
JUSTIFICATION: Simplicity and good performance on small, nearly-sorted data

7.3 Flexibility vs Optimization
--------------------------------

DECISION: Generic data structures vs specialized implementations
TRADE-OFF: Code reusability vs maximum performance
JUSTIFICATION: Educational value and maintainability prioritized

========================================
8. ALGORITHMIC COMPLEXITY SUMMARY
========================================

| Operation | Data Structure | Algorithm | Time Complexity | Space Complexity |
|-----------|---------------|-----------|-----------------|------------------|
| Drug Lookup | HashMap | Hash Search | O(1) avg | O(1) |
| Add Drug | HashMap | Hash Insert | O(1) avg | O(1) |
| Remove Drug | HashMap | Hash Delete | O(1) avg | O(1) |
| Name Sort | Array | Merge Sort | O(n log n) | O(n) |
| Price Sort | Array | Quick Sort | O(n log n) avg | O(log n) |
| Stock Sort | Array | Insertion Sort | O(n²) worst | O(1) |
| Stock Priority | MinHeap | Heap Extract | O(log n) | O(1) |
| Name Search | Array | Linear Search | O(n) | O(1) |
| Binary Search | Sorted Array | Binary Search | O(log n) | O(1) |
| Add Transaction | LinkedList | List Insert | O(1) | O(1) |
| Process Order | Queue | Enqueue/Dequeue | O(1) | O(1) |
| Recent Sale | Stack | Push/Pop | O(1) | O(1) |

========================================
9. REAL-WORLD PERFORMANCE ANALYSIS
========================================

9.1 Pharmacy Workflow Analysis
-------------------------------

HIGH-FREQUENCY OPERATIONS (multiple times per minute):
1. Drug lookup by code: O(1) - Excellent
2. Stock level check: O(1) - Excellent  
3. Add sale record: O(1) - Excellent

MEDIUM-FREQUENCY OPERATIONS (few times per hour):
1. Search drug by name: O(n) - Acceptable for small inventory
2. Stock reorder check: O(log n) - Good
3. Add new drug: O(1) - Excellent

LOW-FREQUENCY OPERATIONS (few times per day):
1. Generate sorted drug list: O(n log n) - Good
2. Comprehensive stock analysis: O(n) - Good
3. System reports: O(n) - Acceptable

CONCLUSION: The algorithmic choices align well with pharmacy operational patterns.

9.2 Scalability Recommendations
--------------------------------

IMMEDIATE TERM (100-1000 drugs):
✓ Current implementation sufficient
✓ All operations perform within acceptable bounds
✓ Memory usage remains reasonable

MEDIUM TERM (1000-5000 drugs):
• Consider indexing for name searches
• Implement pagination for large lists
• Add caching for frequent operations

LONG TERM (5000+ drugs):
• Database integration for persistence
• Distributed storage for high availability
• Advanced indexing and query optimization

========================================
10. CONCLUSION
========================================

The Atinka Meds Pharmacy Inventory System demonstrates effective algorithmic
design for offline-first pharmacy operations. Key strengths include:

ALGORITHMIC STRENGTHS:
✓ O(1) drug lookups for high-frequency operations
✓ Efficient sorting algorithms matched to use cases
✓ Memory-efficient data structures
✓ Predictable performance characteristics

DESIGN PHILOSOPHY VALIDATION:
✓ Offline-first requirement satisfied with file-based persistence
✓ Custom implementations provide educational value
✓ Performance scales appropriately with expected inventory sizes
✓ Simple, maintainable code structure

PERFORMANCE VALIDATION:
✓ Critical operations (drug lookup, stock check) perform in O(1)
✓ Sorting operations complete within user-acceptable timeframes
✓ Memory usage remains reasonable for target hardware
✓ System degrades gracefully with increased load

The algorithmic foundation provides a solid base for Atinka Meds' operational
requirements while maintaining the flexibility for future enhancements and
scaling as the business grows.

========================================
ANALYSIS COMPLETED: July 17, 2025
SYSTEM STATUS: Production Ready
PERFORMANCE RATING: Excellent for Target Environment
========================================
